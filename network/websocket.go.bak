package network

import (
        "fmt"
        "log"
        "time"

        "github.com/byuoitav/event-router-microservice/base"
        "github.com/fatih/color"
        "github.com/gorilla/websocket"
)

const (
        // Time allowed to write a message to the peer.
        writeWait = 10 * time.Second

        // Time allowed to read the next pong message from the router.
        pingWait = 90 * time.Second

        // Interval to wait between retry attempts
        retryInterval = 3 * time.Second
)

type Node struct {
        Name          string
        Conn          *websocket.Conn
        WriteQueue    chan base.Message
        ReadQueue     chan base.Message
        DecoderAddress string
        filters       map[string]bool
        readDone      chan bool
        writeDone     chan bool
        lastPingTime  time.Time
        state         string
}

func (n *Node) OpenConnection() error {
        //open connection to the decoder
        dialer := &websocket.Dialer{
                HandshakeTimeout: 10 * time.Second,
        }

        //conn, _, err := dialer.Dial(fmt.Sprintf("ws://%s/wsapp", n.DecoderAddress), nil)
        conn, _, err := dialer.Dial(fmt.Sprintf("ws://192.168.0.7/wsapp"), nil)
	if err != nil {
                log.Printf(color.HiRedString("There was a problem establishing the websocket with %v : %v", n.DecoderAddress, err.Error()))
                return err
        }
        n.Conn = conn

        return nil
}

